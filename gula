#!/bin/bash

# Variables
HOMEBREW_PREFIX=$(brew --prefix)
scripts_dir="$HOMEBREW_PREFIX/share/support/scripts/scripts"

source "$scripts_dir/global_vars.sh"
source "$scripts_dir/support/logo.sh"


echo ""
echo -e "${BOLD}versión: ${VERSION}"
echo -e "${BOLD}propiedad: Rudo apps${NC}"

echo ""
echo -e "${BOLD}──────────────────────────────────────────────${NC}"
echo -e "${BOLD}Cargando prerequisitos:${NC}"
echo ""
if [ -z "$HOMEBREW_PREFIX" ]; then
    echo "No se encontró el prefijo de Homebrew. Verifica si brew está instalado correctamente."
else
    echo "✅ El prefijo de Homebrew es: $HOMEBREW_PREFIX"
fi

echo -e "✅ Ruta de homebrew: $scripts_dir"
source "$scripts_dir/android/android.sh"
source "$scripts_dir/android/android_support.sh"
source "$scripts_dir/android/android_create_new_project.sh"
source "$scripts_dir/ios/ios.sh"
source "$scripts_dir/ios/ios_support.sh"
source "$scripts_dir/ios/ios_template.sh"
source "$scripts_dir/ios/ios_create_new_project.sh"
source "$scripts_dir/flutter/flutter.sh"
source "$scripts_dir/flutter/flutter_support.sh"
source "$scripts_dir/flutter/flutter_create_new_project.sh"
source "$scripts_dir/python/python.sh"
source "$scripts_dir/python/python_create_project.sh"
source "$scripts_dir/support/general_support.sh"
source "$scripts_dir/support/git.sh"
source "$scripts_dir/support/network.sh"
source "$scripts_dir/support/os.sh"

echo -e "✅ Imports cargados correctamente"

check_version

echo "──────────────────────────────────────────────"

function cleanup {
    remove_temporary_dir
}

# Asociar la señal SIGINT (Ctrl + C) con la función cleanup
trap cleanup SIGINT

install_module() {
  if check_type_of_project; then
    type=0
  else
    type=$?
  fi

  case "$type" in
    0) echo -e "${GREEN}Te encuentras en un proyecto Android${NC}"; install_android_module ;;
    1) echo -e "${GREEN}Te encuentras en un proyecto IOS${NC}";     install_ios_module ;;
    2) echo -e "${GREEN}Te encuentras en un proyecto Flutter${NC}";  install_flutter_module ;;
    3) echo -e "${GREEN}Te encuentras en un proyecto Python${NC}";   install_python_module ;;
    *) echo -e "${RED}Error: No te encuentras en un proyecto válido.${NC}"; exit 1 ;;
  esac
}

help_modules() {
  check_type_of_project
  type=$?

  echo ""
  echo -e "${BOLD}-----------------------------------------------${NC}"
  echo -e "${BOLD} AYUDA${NC}"
  echo -e "${BOLD}-----------------------------------------------${NC}"
  echo " Este script tiene como principal objetivo proporcionar herramientas"
  echo " que aumenten el rendimiento del desarrollador. Dependiendo del tipo"
  echo " de proyecto se ofrecen distintas funcionalidades."
  echo ""
  echo -e "${BOLD} COMANDOS:${NC}"
  echo ""
  echo -e "${BOLD} gula list --key=XXXX${NC}"
  echo ""
  echo " └─ Proporciona el listado de módulos disponibles para instalar."
  echo ""
  echo -e "${BOLD} gula install {module_name} --key=XXXX${NC}"
  echo ""
  echo " └─ Instala el módulo indicado. Debe de estar disponible en el listado anterior"
  echo ""
  if [ $type -eq 0 ]; then
    echo -e "${GREEN}Te encuentras en un proyecto Android${NC}"    
  elif [ $type -eq 1 ]; then
    echo -e "${BOLD} gula template {dominio}${NC}"
    echo ""
    echo " └─ Crea todo el flujo de CLEAN ARCHITECTURE tanto ficheros como"
    echo "    carpetas para el dominio dado"
    echo ""
    echo -e "${BOLD} gula create ${NC}"
    echo ""
    echo " └─ Crea un proyecto con CLEAN ARCHITECTURE"
    echo ""
  elif [ $type -eq 2 ]; then
    echo -e "${GREEN}Te encuentras en un proyecto Flutter${NC}"
    list_flutter
  elif [ $type -eq 3 ]; then
    echo -e "${GREEN}Te encuentras en un proyecto Python${NC}"
    list_python
  else 
    echo -e "${RED}Error: No te encuentras en un proyecto Android/IOS/Flutter.${NC}"
    exit 0
  fi
  echo -e "${BOLD}-----------------------------------------------${NC}"
}

list_modules() {
  if check_type_of_project; then
    type=0
  else
    type=$?
  fi

  case "$type" in
    0) echo -e "${GREEN}Te encuentras en un proyecto Android${NC}"; list_android ;;
    1) echo -e "${GREEN}Te encuentras en un proyecto IOS${NC}";     list_ios ;;
    2) echo -e "${GREEN}Te encuentras en un proyecto Flutter${NC}";  list_flutter ;;
    3) echo -e "${GREEN}Te encuentras en un proyecto Python${NC}";   list_python ;;
    *) echo -e "${RED}Error: No te encuentras en un proyecto válido.${NC}"; exit 1 ;;
  esac
}

install_template() {
  check_type_of_project
  type=$?

  if [ $type -eq 1 ]; then
    echo -e "${GREEN}Te encuentras en un proyecto IOS${NC}"
    install_templates_ios
  else 
    echo -e "${RED}Error: Opción solo disponible para IOS.${NC}"
    exit 0
  fi
}

create_project() {
  echo ""
  if [[ "$MODULE_NAME" == "ios" ]]; then
    echo -e "${GREEN}Empezando la instalación del arquetipo para ios${NC}"
    echo ""
    ios_create_project
  elif [[ "$MODULE_NAME" == "android" ]]; then
    echo -e "${GREEN}Empezando la instalación del arquetipo para android${NC}"
    echo ""
    android_create_project
  elif [[ "$MODULE_NAME" == "flutter" ]]; then
    echo -e "${GREEN}Empezando la instalación del arquetipo para Flutter${NC}"
    echo ""
    flutter_create_project
  elif [[ "$MODULE_NAME" == "python" ]]; then
    echo -e "${GREEN}Empezando la instalación del arquetipo para Python${NC}"
    echo ""
    python_create_project
  else 
    echo -e "${RED}Error: solo esta permitido como opción: ios, android, flutter o python.${NC}"
    echo ""
    exit 0
  fi  
}


# Verificar que se haya pasado un comando válido
if [ -z "$1" ]; then
  echo "Uso: $0 {install|list|template|create}"
  exit 1
fi

# Procesar los argumentos
COMMAND="$1"
shift

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    --key=*)
      KEY="${1#*=}"
      ;;
    install)
      COMMAND="install"
      MODULE_NAME="$(echo "${str:0:1}" | tr '[:lower:]' '[:upper:]')${str:1}" "$2"
      shift
      ;;
    list)
      COMMAND="list"
      ;;
    help)
      COMMAND="help"
      ;;
    create)
      COMMAND="create"
      MODULE_NAME="$(echo "${str:0:1}" | tr '[:lower:]' '[:upper:]')${str:1}" "$2"
      shift
      ;;
    template)
      COMMAND="template"
      MODULE_NAME="$2"
      shift
      ;;
    *)
      MODULE_NAME="$1"
      ;;
  esac
  shift
done  

if [ "$COMMAND" == "install" ]; then
  if [ -z "$MODULE_NAME" ]; then
    echo "Uso: $0 install <module_name> [--key=xxxx]"
    exit 1
  fi
  install_module "$MODULE_NAME"
elif [ "$COMMAND" == "list" ]; then
  list_modules
elif [ "$COMMAND" == "help" ]; then
  help_modules
elif [ "$COMMAND" == "template" ]; then
  if [ -z "$MODULE_NAME" ]; then
    echo "Uso: $0 template <module_name>"
    exit 1
  fi
  install_template "$MODULE_NAME"
elif [ "$COMMAND" == "create" ]; then
  if [ -z "$MODULE_NAME" ]; then
    echo "Uso: $0 create <platform {ios}>"
    exit 1
  fi
  create_project "$MODULE_NAME"
else
  echo "Comando no reconocido. Uso: $0 {install|list|template|create} [--key=xxxx]"
  exit 1
fi