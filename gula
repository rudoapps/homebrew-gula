#!/bin/bash

# Variables
HOMEBREW_PREFIX=$(brew --prefix)
scripts_dir="$HOMEBREW_PREFIX/share/support/scripts/scripts"

source "$scripts_dir/global_vars.sh"
source "$scripts_dir/support/logo.sh"


echo ""
echo -e "${BOLD}versión: ${VERSION}"
echo -e "${BOLD}propiedad: Rudo apps${NC}"

echo ""
echo -e "${BOLD}──────────────────────────────────────────────${NC}"
echo -e "${BOLD}Cargando prerequisitos:${NC}"
echo ""
if [ -z "$HOMEBREW_PREFIX" ]; then
    echo "No se encontró el prefijo de Homebrew. Verifica si brew está instalado correctamente."
else
    echo "✅ El prefijo de Homebrew es: $HOMEBREW_PREFIX"
fi

echo -e "✅ Ruta de homebrew: $scripts_dir"
source "$scripts_dir/android/android.sh"
source "$scripts_dir/android/android_support.sh"
source "$scripts_dir/android/android_create_new_project.sh"
source "$scripts_dir/ios/ios.sh"
source "$scripts_dir/ios/ios_support.sh"
source "$scripts_dir/ios/ios_template.sh"
source "$scripts_dir/ios/ios_create_new_project.sh"
source "$scripts_dir/flutter/flutter.sh"
source "$scripts_dir/flutter/flutter_support.sh"
source "$scripts_dir/flutter/flutter_create_new_project.sh"
source "$scripts_dir/python/python.sh"
source "$scripts_dir/python/python_create_project.sh"
source "$scripts_dir/support/general_support.sh"
source "$scripts_dir/support/git.sh"
source "$scripts_dir/support/network.sh"
source "$scripts_dir/support/os.sh"

echo -e "✅ Imports cargados correctamente"

check_version

echo "──────────────────────────────────────────────"

function cleanup {
    echo ""
    echo -e "${YELLOW}🧹 Ejecutando limpieza...${NC}"
    remove_temporary_dir
}

function cleanup_on_exit {
    # Limpieza sin exit para evitar loop infinito
    if [ -d "$TEMPORARY_DIR" ]; then
        rm -rf "$TEMPORARY_DIR"
    fi
    
    # Limpiar directorio temp-gula si existe
    if [ -d "temp-gula" ]; then
        echo -e "🗑️ Eliminando directorio temp-gula..."
        rm -rf "temp-gula"
    fi
    
    # Limpiar cualquier directorio temporal relacionado con arquetipo
    for temp_dir in temp-archetype architecture-* temp-*; do
        if [ -d "$temp_dir" ]; then
            rm -rf "$temp_dir"
        fi
    done
}

# Asociar señales con las funciones de limpieza
trap cleanup SIGINT SIGTERM
trap cleanup_on_exit EXIT

install_module() {
  if check_type_of_project; then
    type=0
  else
    type=$?
  fi

  case "$type" in
    0) echo -e "${GREEN}Te encuentras en un proyecto Android${NC}"; install_android_module ;;
    1) echo -e "${GREEN}Te encuentras en un proyecto IOS${NC}";     install_ios_module ;;
    2) echo -e "${GREEN}Te encuentras en un proyecto Flutter${NC}";  install_flutter_module ;;
    3) echo -e "${GREEN}Te encuentras en un proyecto Python${NC}";   install_python_module ;;
    *) echo -e "${RED}Error: No te encuentras en un proyecto válido.${NC}"; exit 1 ;;
  esac
}

show_help() {
  echo ""
  echo -e "${BOLD}═══════════════════════════════════════════════${NC}"
  echo -e "${BOLD}                    GULA - AYUDA                 ${NC}"
  echo -e "${BOLD}═══════════════════════════════════════════════${NC}"
  echo ""
  echo -e "${BOLD}DESCRIPCIÓN:${NC}"
  echo "  Herramienta CLI para acelerar el desarrollo con arquetípicos y módulos"
  echo "  predefinidos. Soporta proyectos Android, iOS, Flutter y Python."
  echo ""
  echo -e "${BOLD}USO:${NC}"
  echo "  gula <comando> [opciones]"
  echo ""
  echo -e "${BOLD}COMANDOS PRINCIPALES:${NC}"
  echo ""
  echo -e "${BOLD}  list${NC}     Lista módulos disponibles para el proyecto actual"
  echo -e "${BOLD}  install${NC}  Instala un módulo específico en el proyecto actual"
  echo -e "${BOLD}  create${NC}   Crea un nuevo proyecto con arquitectura predefinida"
  echo -e "${BOLD}  template${NC} Genera templates de Clean Architecture (solo iOS)"
  echo -e "${BOLD}  help${NC}     Muestra esta ayuda"
  echo ""
  echo -e "${BOLD}OPCIONES GLOBALES:${NC}"
  echo ""
  echo -e "${BOLD}  --key=XXXX${NC}     Clave de acceso para repositorios privados (requerida)"
  echo -e "${BOLD}  --branch=YYYY${NC}   Rama específica del repositorio (opcional)"
  echo -e "${BOLD}  --help, -h${NC}     Muestra esta ayuda"
  echo ""
  echo -e "${BOLD}EJEMPLOS DE USO:${NC}"
  echo ""
  echo -e "${BOLD}  Listar módulos disponibles:${NC}"
  echo "  gula list --key=mi_clave_secreta"
  echo "  gula list --key=mi_clave --branch=development"
  echo ""
  echo -e "${BOLD}  Instalar un módulo:${NC}"
  echo "  gula install authentication --key=mi_clave_secreta"
  echo "  gula install network --key=mi_clave --branch=feature-branch"
  echo ""
  echo -e "${BOLD}  Crear nuevos proyectos:${NC}"
  echo "  gula create android --key=mi_clave_secreta"
  echo "  gula create flutter --key=mi_clave_secreta"
  echo "  gula create ios --key=mi_clave_secreta"
  echo "  gula create python --key=mi_clave_secreta"
  echo ""
  echo -e "${BOLD}  Generar templates (solo iOS):${NC}"
  echo "  gula template authentication --key=mi_clave_secreta"
  echo ""
  echo -e "${BOLD}TIPOS DE PROYECTO SOPORTADOS:${NC}"
  echo ""
  echo -e "${BOLD}  📱 Android${NC}   - Proyectos nativos Android con Clean Architecture"
  echo -e "${BOLD}  🍎 iOS${NC}       - Proyectos nativos iOS con Clean Architecture"
  echo -e "${BOLD}  🦋 Flutter${NC}   - Aplicaciones multiplataforma Flutter"
  echo -e "${BOLD}  🐍 Python${NC}    - APIs backend con FastAPI o Django"
  echo ""
  echo -e "${BOLD}NOTAS:${NC}"
  echo ""
  echo "  • La opción --key es requerida para acceder a los repositorios privados"
  echo "  • La opción --branch permite usar ramas específicas (desarrollo, features, etc.)"
  echo "  • Los comandos list/install detectan automáticamente el tipo de proyecto actual"
  echo "  • El comando create requiere especificar la plataforma (android/ios/flutter/python)"
  echo ""
  echo -e "${BOLD}═══════════════════════════════════════════════${NC}"
}

help_modules() {
  show_help
}

list_modules() {
  if check_type_of_project; then
    type=0
  else
    type=$?
  fi

  case "$type" in
    0) echo -e "${GREEN}Te encuentras en un proyecto Android${NC}"; list_android ;;
    1) echo -e "${GREEN}Te encuentras en un proyecto IOS${NC}";     list_ios ;;
    2) echo -e "${GREEN}Te encuentras en un proyecto Flutter${NC}";  list_flutter ;;
    3) echo -e "${GREEN}Te encuentras en un proyecto Python${NC}";   list_python ;;
    *) echo -e "${RED}Error: No te encuentras en un proyecto válido.${NC}"; exit 1 ;;
  esac
}

install_template() {
  check_type_of_project
  type=$?

  if [ $type -eq 1 ]; then
    echo -e "${GREEN}Te encuentras en un proyecto IOS${NC}"
    install_templates_ios
  else 
    echo -e "${RED}Error: Opción solo disponible para IOS.${NC}"
    exit 0
  fi
}

create_project() {
  echo ""
  if [[ "$MODULE_NAME" == "ios" ]]; then
    echo -e "${GREEN}Empezando la instalación del arquetipo para ios${NC}"
    echo ""
    ios_create_project
  elif [[ "$MODULE_NAME" == "android" ]]; then
    echo -e "${GREEN}Empezando la instalación del arquetipo para android${NC}"
    echo ""
    android_create_project
  elif [[ "$MODULE_NAME" == "flutter" ]]; then
    echo -e "${GREEN}Empezando la instalación del arquetipo para Flutter${NC}"
    echo ""
    flutter_create_project
  elif [[ "$MODULE_NAME" == "python" ]]; then
    echo -e "${GREEN}Empezando la instalación del arquetipo para Python${NC}"
    echo ""
    python_create_project
  else 
    echo -e "${RED}Error: solo esta permitido como opción: ios, android, flutter o python.${NC}"
    echo ""
    exit 0
  fi  
}


# Verificar que se haya pasado un comando válido
if [ -z "$1" ]; then
  echo "Uso: $0 {install|list|template|create|help} [opciones]"
  echo "Usa '$0 --help' para más información."
  exit 1
fi

# Procesar los argumentos
COMMAND="$1"
# Manejar --help como primer argumento
if [[ "$COMMAND" == "--help" || "$COMMAND" == "-h" ]]; then
  COMMAND="help"
fi
shift

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    --key=*)
      KEY="${1#*=}"
      ;;
    --branch=*)
      BRANCH="${1#*=}"
      ;;
    --help|-h)
      COMMAND="help"
      ;;
    install)
      COMMAND="install"
      MODULE_NAME="$(echo "${str:0:1}" | tr '[:lower:]' '[:upper:]')${str:1}" "$2"
      shift
      ;;
    list)
      COMMAND="list"
      ;;
    help)
      COMMAND="help"
      ;;
    create)
      COMMAND="create"
      MODULE_NAME="$(echo "${str:0:1}" | tr '[:lower:]' '[:upper:]')${str:1}" "$2"
      shift
      ;;
    template)
      COMMAND="template"
      MODULE_NAME="$2"
      shift
      ;;
    *)
      MODULE_NAME="$1"
      ;;
  esac
  shift
done  

if [ "$COMMAND" == "install" ]; then
  if [ -z "$MODULE_NAME" ]; then
    echo "Uso: $0 install <module_name> [--key=xxxx]"
    exit 1
  fi
  install_module "$MODULE_NAME"
elif [ "$COMMAND" == "list" ]; then
  list_modules
elif [ "$COMMAND" == "help" ]; then
  help_modules
elif [ "$COMMAND" == "template" ]; then
  if [ -z "$MODULE_NAME" ]; then
    echo "Uso: $0 template <module_name>"
    exit 1
  fi
  install_template "$MODULE_NAME"
elif [ "$COMMAND" == "create" ]; then
  if [ -z "$MODULE_NAME" ]; then
    echo "Uso: $0 create <platform {ios}>"
    exit 1
  fi
  create_project "$MODULE_NAME"
else
  echo "Comando no reconocido. Uso: $0 {install|list|template|create|help} [--key=xxxx] [--branch=yyyy]"
  echo "Usa '$0 --help' para obtener ayuda detallada."
  exit 1
fi