import SwiftUI

class {{TEMPLATE_NAME}}ViewModel: ObservableObject {
    struct UIState {
        var {{PARAM_NAME}}s = [{{TEMPLATE_NAME}}]()
        var loading: Bool = true
        var error: Error?
    }

    @Published var uiState = UIState()

    private let {{PARAM_NAME}}UseCases: {{TEMPLATE_NAME}}UseCases

    init({{PARAM_NAME}}UseCases: {{TEMPLATE_NAME}}UseCases) {
        self.{{PARAM_NAME}}UseCases = {{PARAM_NAME}}UseCases
    }

    @objc @MainActor
    func get{{TEMPLATE_NAME}}() {
        Task {
            do {
                let {{PARAM_NAME}}s = try await self.{{PARAM_NAME}}UseCases.get{{TEMPLATE_NAME}}s()
                DispatchQueue.main.async {
                    self.uiState.{{PARAM_NAME}}s = {{PARAM_NAME}}s
                    self.uiState.loading = false
                }
            } catch {
                DispatchQueue.main.async {
                    self.uiState.error = NSError(domain: "com.example.error", code: 1, userInfo: [NSLocalizedDescriptionKey: "Algo sali√≥ mal"])
                    self.uiState.loading = false
                }
            }
        }
    }
}

