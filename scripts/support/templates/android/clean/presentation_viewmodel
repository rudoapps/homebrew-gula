import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class {{TEMPLATE_NAME}}ViewModel @Inject constructor(
    private val getAll{{TEMPLATE_NAME}}sUseCase: GetAll{{TEMPLATE_NAME}}sUseCase
) : ViewModel() {
    
    private val _uiState = MutableStateFlow({{TEMPLATE_NAME}}UiState())
    val uiState: StateFlow<{{TEMPLATE_NAME}}UiState> = _uiState.asStateFlow()
    
    fun getAll{{TEMPLATE_NAME}}s() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(isLoading = true)
            try {
                val {{PARAM_NAME}}s = getAll{{TEMPLATE_NAME}}sUseCase()
                _uiState.value = _uiState.value.copy(
                    {{PARAM_NAME}}s = {{PARAM_NAME}}s,
                    isLoading = false
                )
            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    error = e.message,
                    isLoading = false
                )
            }
        }
    }
}

data class {{TEMPLATE_NAME}}UiState(
    val {{PARAM_NAME}}s: List<{{TEMPLATE_NAME}}> = emptyList(),
    val isLoading: Boolean = false,
    val error: String? = null
)